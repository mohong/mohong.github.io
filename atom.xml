<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>墨鸿的博客</title>
  
  <subtitle>墨鸿的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://arthas.com.cn/"/>
  <updated>2018-11-13T14:09:30.435Z</updated>
  <id>http://arthas.com.cn/</id>
  
  <author>
    <name>墨鸿</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS中的BEM规范</title>
    <link href="http://arthas.com.cn/2018/11/13/CSS%E4%B8%AD%E7%9A%84BEM%E8%A7%84%E8%8C%83/"/>
    <id>http://arthas.com.cn/2018/11/13/CSS中的BEM规范/</id>
    <published>2018-11-13T13:59:50.000Z</published>
    <updated>2018-11-13T14:09:30.435Z</updated>
    
    <content type="html"><![CDATA[<p>BEM代表 “块（block）,元素（element）,修饰符（modifier）”</p><ul><li>block: 页面是由多个block构成的，跟其他的block区分开来</li><li>element：并不是简单的父子关系，在区块中担负的职责，取唯一性的名字</li><li>modifier：状态的修改</li></ul><p>以微信的weui组件库中的tabbar组件为例：</p><p>tabbar.html:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./weui.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./tabbar.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"weui-tabbar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"weui-tabbar__item"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"weui-tabbar__icon weui-tabbar__icon_on"</span> <span class="attr">src</span>=<span class="string">"./icon/icon_tabbar.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"weui-badge"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"weui-tabbar__label"</span>&gt;</span>微信<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"weui-tabbar__item"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"weui-tabbar__icon"</span> <span class="attr">src</span>=<span class="string">"./icon/icon_tabbar.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"weui-badge"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"weui-tabbar__label"</span>&gt;</span>微信<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"weui-tabbar__item"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"weui-tabbar__icon"</span> <span class="attr">src</span>=<span class="string">"./icon/icon_tabbar.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"weui-badge"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"weui-tabbar__label"</span>&gt;</span>微信<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"weui-tabbar__item"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"weui-tabbar__icon"</span> <span class="attr">src</span>=<span class="string">"./icon/icon_tabbar.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"weui-badge"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"weui-tabbar__label"</span>&gt;</span>微信<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>weui-tabbar表示block</li><li>weui-tabbar<strong>item、weui-tabbar</strong>icon中的__item和_icon表示element</li><li>weui-tabbar__icon_on中的_on表示modifier，即元素的状态</li></ul><p>weui.css：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">-webkit-user-select</span>: none;</span><br><span class="line">  <span class="attribute">user-select</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tabbar.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.weui-tabbar</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">500</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f7f7fa</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.weui-tabbar__item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#808080</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.weui-tabbar__item</span> &gt; <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.weui-tabbar__icon</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">27px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">27px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.weui-badge</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="number">13px</span>;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">padding</span>: .<span class="number">15em</span> .<span class="number">4em</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f43539</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.weui-tabbar__label</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#808080</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="comment">/* 此处的行高是相对于字体大小的比例，即字体的1.8倍 */</span></span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.8</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;BEM代表 “块（block）,元素（element）,修饰符（modifier）”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;block: 页面是由多个block构成的，跟其他的block区分开来&lt;/li&gt;
&lt;li&gt;element：并不是简单的父子关系，在区块中担负的职责，取唯一性的名字
      
    
    </summary>
    
      <category term="前端" scheme="http://arthas.com.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://arthas.com.cn/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript数组转树结构</title>
    <link href="http://arthas.com.cn/2018/10/24/JavaScript%E6%95%B0%E7%BB%84%E8%BD%AC%E6%A0%91%E7%BB%93%E6%9E%84/"/>
    <id>http://arthas.com.cn/2018/10/24/JavaScript数组转树结构/</id>
    <published>2018-10-24T13:43:22.000Z</published>
    <updated>2018-10-24T13:52:07.828Z</updated>
    
    <content type="html"><![CDATA[<p>对于带有树结构性质的数组，例如元素中含有id和parentId，经常需要处理成树形结构来处理业务。比如多级导航，遍历文件夹等。用遍历的方式实现转换方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* data 数组数据</span></span><br><span class="line"><span class="comment">* pid 顶级元素的parentId值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">array2Tree</span> (<span class="params">data, pid</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = []</span><br><span class="line">  <span class="keyword">let</span> temp</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (data[i].parentId === pid) &#123;</span><br><span class="line">      <span class="keyword">let</span> obj = &#123;<span class="attr">id</span>: data[i].id, <span class="attr">name</span>: data[i].name&#125;</span><br><span class="line">      temp = array2Tree(data, data[i].id)</span><br><span class="line">      <span class="keyword">if</span> (temp.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        obj.children = temp</span><br><span class="line">      &#125;</span><br><span class="line">      result.push(obj)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考文章：</p><p><a href="https://www.imooc.com/article/13562" target="_blank" rel="noopener">js递归实现数组转树结构（多级菜单应用）</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于带有树结构性质的数组，例如元素中含有id和parentId，经常需要处理成树形结构来处理业务。比如多级导航，遍历文件夹等。用遍历的方式实现转换方法：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
      <category term="前端" scheme="http://arthas.com.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://arthas.com.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>BFC布局介绍</title>
    <link href="http://arthas.com.cn/2018/10/10/BFC%E5%B8%83%E5%B1%80%E4%BB%8B%E7%BB%8D/"/>
    <id>http://arthas.com.cn/2018/10/10/BFC布局介绍/</id>
    <published>2018-10-10T09:37:21.000Z</published>
    <updated>2018-10-12T07:57:41.463Z</updated>
    
    <content type="html"><![CDATA[<p>BFC全称block formatting context，中文为“块级格式化上下文”。如果一个元素具有BFC，则内部元素不会影响到外部元素。所以BFC元素是不可能发生margin重叠的，因为margin重叠会影响到外部的元素；BFC元素也可用用来清除浮动的影响，因为如果不清除，子元素浮动则父元素高度塌陷。必然会影响元素的布局和定位。</p><p>以下条件会触发BFC：</p><ul><li><code>&lt;html&gt;</code>根元素</li><li>float的值不为none时</li><li>overflow的值为auto、scroll和hidden</li><li>display的值为table-cell、table-caption、inline-block中的任何一个</li><li>position的值不为relative和static</li></ul><p>换言之，只要元素符合上面任一条件，就无需使用clear:both的属性去清除浮动的影响了。</p><p>以下是一个图片浮动的例子：</p><script async src="//jsrun.net/CfhKp/embed/all/light/"></script><p>可以看到文字和图片出现了环绕效果。如果我们想让文字和图片隔开该如何实现？只需要设置文字部分为BFC元素：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.animal</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script async src="//jsrun.net/4fhKp/embed/all/light/"></script><p>用BFC实现一个两列布局会简单很多：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bfc"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left side"</span>&gt;</span>左侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bfc"</span>&gt;</span>主体内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bfc</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.side</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script async src="//jsrun.net/SfhKp/embed/all/light/"></script><p>摘自张鑫旭《CSS世界》一书</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;BFC全称block formatting context，中文为“块级格式化上下文”。如果一个元素具有BFC，则内部元素不会影响到外部元素。所以BFC元素是不可能发生margin重叠的，因为margin重叠会影响到外部的元素；BFC元素也可用用来清除浮动的影响，因为如果不
      
    
    </summary>
    
      <category term="前端" scheme="http://arthas.com.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://arthas.com.cn/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>CSS计数器</title>
    <link href="http://arthas.com.cn/2018/10/09/CSS%E8%AE%A1%E6%95%B0%E5%99%A8/"/>
    <id>http://arthas.com.cn/2018/10/09/CSS计数器/</id>
    <published>2018-10-09T06:51:22.000Z</published>
    <updated>2018-10-09T07:13:01.834Z</updated>
    
    <content type="html"><![CDATA[<p>CSS 计数器本质上是 CSS 维护的变量，这些变量可以根据 CSS 规则增加以跟踪使用次数。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>1.命名变量并定义计数器的值，默认为 0。表示定义了varname计数器，从2开始计数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">counter-reset: varname 2;</span><br></pre></td></tr></table></figure><p>2.递增计数器的值，默认增量为 1。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">counter-increment: varname;</span><br></pre></td></tr></table></figure><p>3.counter() / counters() 方法显示计数。和伪元素before/after配合使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">counter(varname);</span><br></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>1、统计点击按钮</p><script async src="//jsrun.net/KWhKp/embed/html,css,result/light/"></script><p>2、文章序号自动递增</p><script async src="//jsrun.net/pWhKp/embed/html,css,result/light/"></script><p>3、文章序号掏钱递增</p><script async src="//jsrun.net/YWhKp/embed/html,css,result/light/"></script><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://segmentfault.com/a/1190000013943801" target="_blank" rel="noopener">使用 CSS 计数器</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CSS 计数器本质上是 CSS 维护的变量，这些变量可以根据 CSS 规则增加以跟踪使用次数。&lt;/p&gt;
&lt;h3 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;p&gt;1.命名变量并定义计数器的值，
      
    
    </summary>
    
      <category term="前端" scheme="http://arthas.com.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="http://arthas.com.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>贪心算法</title>
    <link href="http://arthas.com.cn/2018/09/18/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    <id>http://arthas.com.cn/2018/09/18/贪心算法/</id>
    <published>2018-09-18T08:16:48.000Z</published>
    <updated>2018-09-27T12:46:55.720Z</updated>
    
    <content type="html"><![CDATA[<h2 id="贪心算法简介"><a href="#贪心算法简介" class="headerlink" title="贪心算法简介"></a>贪心算法简介</h2><blockquote><p>贪心算法是指：在每一步求解的步骤中，它要求“贪婪”的选择最佳操作，并希望通过一系列的最优选择，能够产生一个问题的（全局的）最优解。</p></blockquote><p>贪心算法每一步必须满足以下条件：</p><ul><li>可行的：即它必须满足问题的约束</li><li>局部最优：他是当前步骤中所有可行选择中最佳的局部选择</li><li>不可取消：即选择一旦做出，在算法的后面步骤就不可改变了</li></ul><p>贪心法在解决问题的策略上目光短浅，仅仅依据当前已有的信息就做出选择，并且一旦做出了选择，无论将来有什么结果，这个选择都不会改变。一句话：不求最优，仅仅求可行解。对于一个详细的问题，怎么知道是否可用贪心算法解此问题，以及是否能得到问题的最优解? 我们能够依据贪心法的2个重要的性质去证明：<strong>贪心选择</strong>性质和<strong>最优子结构</strong>性质：</p><h3 id="贪心选择"><a href="#贪心选择" class="headerlink" title="贪心选择"></a>贪心选择</h3><p>什么叫贪心选择？从字义上就是贪心也就是目光短线。贪图眼前利益。在算法中就是仅仅依据当前已有的信息就做出选择，并且以后都不会改变这次选择。（这是和动态规划法的主要差别）</p><h3 id="最优子结构"><a href="#最优子结构" class="headerlink" title="最优子结构"></a>最优子结构</h3><p>当一个问题的最优解包括其子问题的最优解时，称此问题具有最优子结构性质。这个性质和动态规划法的一样，最优子结构性质是可用动态规划算法或贪心算法求解的关键特征。</p><h2 id="贪心算法案例"><a href="#贪心算法案例" class="headerlink" title="贪心算法案例"></a>贪心算法案例</h2><h3 id="1、活动选择问题"><a href="#1、活动选择问题" class="headerlink" title="1、活动选择问题"></a>1、活动选择问题</h3><p>这是《算法导论》上的例子，也是一个非常经典的问题。有n个需要在同一天使用同一个教室的活动a1,a2,…,an，教室同一时刻只能由一个活动使用。每个活动ai都有一个开始时间si和结束时间fi 。一旦被选择后，活动ai就占据半开时间区间[si,fi)。如果[si,fi]和[sj,fj]互不重叠，ai和aj两个活动就可以被安排在这一天。该问题就是要安排这些活动使得尽量多的活动能不冲突的举行。例如下图所示的活动集合S，其中各项活动按照结束时间单调递增排序。</p><p><img src="http://ob9qd20l4.bkt.clouddn.com/image-20160509195427891.jpg" alt=""></p><p>用贪心法的话思想很简单：活动越早结束，剩余的时间是不是越多？那我就早最早结束的那个活动，找到后在剩下的活动中再找最早结束的不就得了？</p><p>java代码实现：</p><p>ActiveTime.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveTime</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建活动并添加到集合中</span></span><br><span class="line">        Active act1 = <span class="keyword">new</span> Active(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">        Active act2 = <span class="keyword">new</span> Active(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">        Active act3 = <span class="keyword">new</span> Active(<span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line">        Active act4 = <span class="keyword">new</span> Active(<span class="number">5</span>, <span class="number">7</span>);</span><br><span class="line">        Active act5 = <span class="keyword">new</span> Active(<span class="number">3</span>, <span class="number">8</span>);</span><br><span class="line">        Active act6 = <span class="keyword">new</span> Active(<span class="number">5</span>, <span class="number">9</span>);</span><br><span class="line">        Active act7 = <span class="keyword">new</span> Active(<span class="number">6</span>, <span class="number">10</span>);</span><br><span class="line">        Active act8 = <span class="keyword">new</span> Active(<span class="number">8</span>, <span class="number">11</span>);</span><br><span class="line">        Active act9 = <span class="keyword">new</span> Active(<span class="number">8</span>, <span class="number">12</span>);</span><br><span class="line">        Active act10 = <span class="keyword">new</span> Active(<span class="number">2</span>, <span class="number">13</span>);</span><br><span class="line">        Active act11 = <span class="keyword">new</span> Active(<span class="number">12</span>, <span class="number">14</span>);</span><br><span class="line">        List&lt;Active&gt; actives = <span class="keyword">new</span> ArrayList&lt;Active&gt;();</span><br><span class="line">        actives.add(act1);</span><br><span class="line">        actives.add(act2);</span><br><span class="line">        actives.add(act3);</span><br><span class="line">        actives.add(act4);</span><br><span class="line">        actives.add(act5);</span><br><span class="line">        actives.add(act6);</span><br><span class="line">        actives.add(act7);</span><br><span class="line">        actives.add(act8);</span><br><span class="line">        actives.add(act9);</span><br><span class="line">        actives.add(act10);</span><br><span class="line">        actives.add(act11);</span><br><span class="line">        </span><br><span class="line">        List&lt;Active&gt; bestActives  = getBestActives(actives, <span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bestActives.size(); i++) &#123;</span><br><span class="line">            System.out.println(bestActives.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> actives 活动集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startTime 教室的开始使用时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endTime 教室的结束使用时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Active&gt; <span class="title">getBestActives</span><span class="params">(List&lt;Active&gt; actives, <span class="keyword">int</span> startTime, <span class="keyword">int</span> endTime)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//最佳活动选择集合</span></span><br><span class="line">        List&lt;Active&gt; bestActives = <span class="keyword">new</span> ArrayList&lt;Active&gt;();</span><br><span class="line">        <span class="comment">//将活动按照最早结束时间排序</span></span><br><span class="line">        actives.sort(<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//nowTime 用来记录上次活动结束时间</span></span><br><span class="line">        <span class="keyword">int</span> nowTime = startTime;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 因为我们已经按照最早结束时间排序，那么只要活动在时间范围内</span></span><br><span class="line"><span class="comment">         * actives.get(1)就应当是第一个活动的结束时间.</span></span><br><span class="line"><span class="comment">         * 则我们记录第一次活动结束的时间，在结合剩下的活动中，</span></span><br><span class="line"><span class="comment">         * 选取开始时间大于nowTime且结束时间又在范围内的活动，则为第二次活动时间，</span></span><br><span class="line"><span class="comment">         * 知道选出所有活动</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; actives.size(); i++) &#123;</span><br><span class="line">            Active act = actives.get(i);</span><br><span class="line">            <span class="keyword">if</span>(act.getStartTime()&gt;=nowTime&amp;&amp;act.getEndTime()&lt;=endTime)&#123;</span><br><span class="line">                bestActives.add(act);</span><br><span class="line">                nowTime = act.getEndTime();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bestActives;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Active.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Active</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Active</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> startTime;<span class="comment">//活动开始时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> endTime;<span class="comment">//活动结束时间</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Active</span><span class="params">(<span class="keyword">int</span> startTime, <span class="keyword">int</span> endTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.startTime = startTime;</span><br><span class="line">        <span class="keyword">this</span>.endTime = endTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStartTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> startTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStartTime</span><span class="params">(<span class="keyword">int</span> startTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.startTime = startTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getEndTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> endTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEndTime</span><span class="params">(<span class="keyword">int</span> endTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.endTime = endTime;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Active [startTime="</span> + startTime + <span class="string">", endTime="</span> + endTime + <span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//活动排序时按照结束时间升序</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Active o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.endTime&gt;o.getEndTime())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.endTime == o.endTime)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Active [startTime=<span class="number">1</span>, endTime=<span class="number">4</span>]</span><br><span class="line">Active [startTime=<span class="number">5</span>, endTime=<span class="number">7</span>]</span><br><span class="line">Active [startTime=<span class="number">8</span>, endTime=<span class="number">11</span>]</span><br><span class="line">Active [startTime=<span class="number">12</span>, endTime=<span class="number">14</span>]</span><br></pre></td></tr></table></figure><h3 id="2、买彩票的问题"><a href="#2、买彩票的问题" class="headerlink" title="2、买彩票的问题"></a>2、买彩票的问题</h3><p>这是leetcode上的一道题：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/description/" target="_blank" rel="noopener">122. 买卖股票的最佳时机 II</a></p><p>题解：只要后一天的价格比之前高就卖出，这样才能赚。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (prices[i] &lt; prices[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                sum = sum + prices[i + <span class="number">1</span>] - prices[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、分饼干问题"><a href="#3、分饼干问题" class="headerlink" title="3、分饼干问题"></a>3、分饼干问题</h3><blockquote><p>贪心算法通常和排序是分不开的，如果题目给出数组没有排序，我们就需要自己进行排序。</p></blockquote><p>leecode第455题<a href="https://leetcode-cn.com/problems/assign-cookies/description/" target="_blank" rel="noopener">分发饼干</a></p><p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。对每个孩子 i ，都有一个胃口值 gi ，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j ，都有一个尺寸 sj 。如果 sj &gt;= gi ，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p><p>题解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findContentChildren</span><span class="params">(<span class="keyword">int</span>[] g, <span class="keyword">int</span>[] s)</span> </span>&#123;</span><br><span class="line">    Arrays.sort(g);</span><br><span class="line">    Arrays.sort(s);</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; g.length &amp;&amp; j &lt; s.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (g[i] &lt;= s[j]) &#123;</span><br><span class="line">            res++;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.cnblogs.com/xsyfl/p/6938642.html" target="_blank" rel="noopener">五大常用算法之三贪心算法</a></li><li><a href="https://www.cnblogs.com/gavanwanggw/p/7141358.html" target="_blank" rel="noopener">五大算法思想—贪心算法</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;贪心算法简介&quot;&gt;&lt;a href=&quot;#贪心算法简介&quot; class=&quot;headerlink&quot; title=&quot;贪心算法简介&quot;&gt;&lt;/a&gt;贪心算法简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;贪心算法是指：在每一步求解的步骤中，它要求“贪婪”的选择最佳操作，并希望通过一系列
      
    
    </summary>
    
      <category term="编程基础" scheme="http://arthas.com.cn/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Algorithms" scheme="http://arthas.com.cn/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Delete Node in a Linked List</title>
    <link href="http://arthas.com.cn/2018/09/17/Delete-Node-in-a-Linked-List/"/>
    <id>http://arthas.com.cn/2018/09/17/Delete-Node-in-a-Linked-List/</id>
    <published>2018-09-17T02:54:34.000Z</published>
    <updated>2018-09-17T12:58:00.727Z</updated>
    
    <content type="html"><![CDATA[<p>leetcode第237号题<a href="https://leetcode.com/problems/delete-node-in-a-linked-list/description/" target="_blank" rel="noopener">Delete Node in a Linked List</a>，从链表中删除一个节点。刚看到这个题目还以为是题目出错了，因为要删除一个一个节点，至少题设要告诉链表的头结点和需要删除的节点。查阅之后才明白并不是题目出错，而是自己思路理解有误。在没有告知头结点的情况下，只告诉要删除的节点，也是可以删除的。原理就是用把当前传入的节点(即需要删除的节点)用其下一个节点覆盖掉。</p><p>因为题目中已告知：</p><ul><li>该链表至少两个节点</li><li>所有节点的值均唯一</li><li>给出的节点不会是最后的尾节点并且一定是有效节点</li><li>不要返回任何值</li></ul><p>题解代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(ListNode node)</span> </span>&#123;</span><br><span class="line">    node.val = node.next.val;</span><br><span class="line">    node.next = node.next.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;leetcode第237号题&lt;a href=&quot;https://leetcode.com/problems/delete-node-in-a-linked-list/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Delete Nod
      
    
    </summary>
    
      <category term="编程基础" scheme="http://arthas.com.cn/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="leetcode" scheme="http://arthas.com.cn/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中apply、call 的区别</title>
    <link href="http://arthas.com.cn/2018/09/03/JavaScript%E4%B8%ADapply%E3%80%81call-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://arthas.com.cn/2018/09/03/JavaScript中apply、call-的区别/</id>
    <published>2018-09-03T07:33:30.000Z</published>
    <updated>2018-09-09T14:52:14.443Z</updated>
    
    <content type="html"><![CDATA[<p>在 javascript 中，call 和 apply 都是为了改变某个函数运行时的上下文（context）而存在的，换句话说，就是为了改变函数体内部 this 的指向。<br>JavaScript 的一大特点是，函数存在<code>定义时上下文</code>和<code>运行时上下文</code>以及<code>上下文是可以改变的</code>这样的概念。</p><p>先来一个栗子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fruits</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line">fruits.prototype = &#123;</span><br><span class="line">    color: <span class="string">"red"</span>,</span><br><span class="line">    say: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"My color is "</span> + <span class="keyword">this</span>.color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> apple = <span class="keyword">new</span> fruits;</span><br><span class="line">apple.say();    <span class="comment">//My color is red</span></span><br></pre></td></tr></table></figure><p>但是如果我们有一个对象banana= {color : “yellow”} ,我们不想对它重新定义 say 方法，那么我们可以通过 call 或 apply 用 apple 的 say 方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">banana = &#123;</span><br><span class="line">    color: <span class="string">"yellow"</span></span><br><span class="line">&#125;</span><br><span class="line">apple.say.call(banana);     <span class="comment">//My color is yellow</span></span><br><span class="line">apple.say.apply(banana);    <span class="comment">//My color is yellow</span></span><br></pre></td></tr></table></figure></p><p>所以，可以看出 call 和 apply 是为了动态改变 this 而出现的，当一个 object 没有某个方法（本栗子中banana没有say方法），但是其他的有（本栗子中apple有say方法），我们可以借助call或apply用其它对象的方法来操作。</p><h3 id="apply、call-的区别"><a href="#apply、call-的区别" class="headerlink" title="apply、call 的区别"></a>apply、call 的区别</h3><p>对于 apply、call 二者而言，作用完全一样，只是接受参数的方式不太一样。</p><p>第一个参数均为执行时的this对象，call需要把参数按顺序传递进去，而apply 则是把参数放在数组里。</p><p>JavaScript 中，某个函数的参数数量是不固定的，因此要说适用条件的话，当你的参数是明确知道数量时用 call 。<br>而不确定的时候用 apply，然后把参数 push 进数组传递进去。当参数数量不确定时，函数内部也可以通过 arguments 这个伪数组来遍历所有的参数。</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p><strong>将伪数组转换为数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组 = <span class="built_in">Array</span>.prototype.slice.call(伪数组))</span><br></pre></td></tr></table></figure><p><strong>判断参数类型</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(&#123;&#125;)</span><br><span class="line"><span class="comment">// "[object Object]"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call([<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>])</span><br><span class="line"><span class="comment">// "[object Array]"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// "[object Number]”</span></span><br></pre></td></tr></table></figure><p>参考资料：</p><ul><li><a href="http://www.cnblogs.com/coco1s/p/4833199.html" target="_blank" rel="noopener">【优雅代码】深入浅出 妙用Javascript中apply、call、bind</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 javascript 中，call 和 apply 都是为了改变某个函数运行时的上下文（context）而存在的，换句话说，就是为了改变函数体内部 this 的指向。&lt;br&gt;JavaScript 的一大特点是，函数存在&lt;code&gt;定义时上下文&lt;/code&gt;和&lt;code&gt;
      
    
    </summary>
    
      <category term="前端" scheme="http://arthas.com.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://arthas.com.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli多环境打包配置</title>
    <link href="http://arthas.com.cn/2018/08/23/vue-cli%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%89%93%E5%8C%85%E9%85%8D%E7%BD%AE/"/>
    <id>http://arthas.com.cn/2018/08/23/vue-cli多环境打包配置/</id>
    <published>2018-08-23T06:11:09.000Z</published>
    <updated>2018-09-03T06:24:46.378Z</updated>
    
    <content type="html"><![CDATA[<p>通过<code>npm run build</code>打包之后的静态项目，可能部署在不同环境中，即提供数据的api也是多变的。需要根据配置在打包时动态生成。假设需求是需要打包测试环境和生产环境两套静态文件：</p><p>1、<code>package.json</code>中script部门定义<code>test_build</code>、<code>production_build</code>两条指令，并给node环境变量中增加了环境变量<code>BUILD_ENV</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"dev"</span>: <span class="string">"webpack-dev-server --disableHostCheck=true --inline --progress --config build/webpack.dev.conf.js"</span>,</span><br><span class="line">  <span class="string">"start"</span>: <span class="string">"npm run dev"</span>,</span><br><span class="line">  <span class="string">"build"</span>: <span class="string">"node build/build.js"</span>,</span><br><span class="line">  <span class="string">"test_build"</span>: <span class="string">"BUILD_ENV=test node build/build.js"</span>,</span><br><span class="line">  <span class="string">"production_build"</span>: <span class="string">"BUILD_ENV=production node build/build.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、<code>./build/build.js</code>中增加并修改以下代码，用于加载不同文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./check-versions'</span>)()</span><br><span class="line">process.env.NODE_ENV = <span class="string">'production'</span></span><br><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">'ora'</span>)</span><br><span class="line"><span class="keyword">const</span> rm = <span class="built_in">require</span>(<span class="string">'rimraf'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加部分</span></span><br><span class="line"><span class="keyword">let</span> webpackConfigFilePath = <span class="string">''</span></span><br><span class="line"><span class="keyword">switch</span> (process.env.BUILD_ENV) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'test'</span>:</span><br><span class="line">    webpackConfigFilePath = <span class="string">'./webpack.test.conf'</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'production'</span>:</span><br><span class="line">    webpackConfigFilePath = <span class="string">'./webpack.prod.conf'</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    webpackConfigFilePath = <span class="string">'./webpack.prod.conf'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 修改加载文件路径</span></span><br><span class="line"><span class="keyword">const</span> webpackConfig = <span class="built_in">require</span>(webpackConfigFilePath)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原脚手架代码</span></span><br><span class="line"><span class="keyword">const</span> spinner = ora(<span class="string">'building for production...'</span>)</span><br><span class="line">spinner.start()</span><br><span class="line"></span><br><span class="line">rm(path.join(config.build.assetsRoot, config.build.assetsSubDirectory), err =&gt; &#123;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>3、修改<code>./build</code>文件夹下增加<code>webpack.prod.conf.js</code>。plugins中<code>webpack.DefinePlugin</code>插件下定义的变量可以在项目中作为全局变量直接使用。<br>比如生产环境中的配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">plugins: [</span><br><span class="line">    <span class="comment">// http://vuejs.github.io/vue-loader/en/workflow/production.html</span></span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="string">'process.env'</span>: env,</span><br><span class="line">      <span class="string">'HTTP_API'</span>: <span class="string">'"prod.api.com"'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">      uglifyOptions: &#123;</span><br><span class="line">        compress: &#123;</span><br><span class="line">          warnings: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      sourceMap: config.build.productionSourceMap,</span><br><span class="line">      parallel: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>测试环境将’HTTP_API’的值改为测试环境的接口。注意该需要用引号引起来，因为解析的时候不会自定转为字符串。是<code>&#39;&quot;prod.api.com&quot;&#39;</code>不是<code>&#39;prod.api.com&#39;</code>;</p><p>4、直接在项目中使用<code>HTTP_API</code>全局变量即可。例如使用axios库时：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.baseURL = HTTP_API</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过&lt;code&gt;npm run build&lt;/code&gt;打包之后的静态项目，可能部署在不同环境中，即提供数据的api也是多变的。需要根据配置在打包时动态生成。假设需求是需要打包测试环境和生产环境两套静态文件：&lt;/p&gt;
&lt;p&gt;1、&lt;code&gt;package.json&lt;/cod
      
    
    </summary>
    
      <category term="前端" scheme="http://arthas.com.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vue" scheme="http://arthas.com.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue封装的svg圆形进度条</title>
    <link href="http://arthas.com.cn/2018/06/26/vue%E5%B0%81%E8%A3%85%E7%9A%84svg%E5%9C%86%E5%BD%A2%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
    <id>http://arthas.com.cn/2018/06/26/vue封装的svg圆形进度条/</id>
    <published>2018-06-26T14:31:17.000Z</published>
    <updated>2018-06-26T14:59:39.973Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>可缩放矢量图形（Scalable Vector Graphics，SVG)，是一种用来描述二维矢量图形的 XML 标记语言。 简单地说，SVG 面向图形，HTML 面向文本。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"progress-circle"</span>&gt;</span><br><span class="line">    &lt;svg :width=<span class="string">"radius"</span> :height=<span class="string">"radius"</span> viewBox=<span class="string">"0 0 100 100"</span> version=<span class="string">"1.1"</span> xmlns=<span class="string">"http://www.w3.org/2000/svg"</span>&gt;</span><br><span class="line">      &lt;circle <span class="class"><span class="keyword">class</span></span>=<span class="string">"progress-background"</span> cx=<span class="string">"50"</span> cy=<span class="string">"50"</span> r=<span class="string">"50"</span> fill=<span class="string">"transparent"</span>/&gt;</span><br><span class="line">      &lt;circle <span class="class"><span class="keyword">class</span></span>=<span class="string">"progress-bar"</span> cx=<span class="string">"50"</span> cy=<span class="string">"50"</span> r=<span class="string">"50"</span> fill=<span class="string">"transparent"</span></span><br><span class="line">      :stroke-dasharray=<span class="string">"dashArray"</span> :stroke-dashoffset=<span class="string">"dashOffset"</span> /&gt;</span><br><span class="line">    &lt;<span class="regexp">/svg&gt;</span></span><br><span class="line"><span class="regexp">    &lt;slot&gt;&lt;/</span>slot&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/ecmascript-6"</span>&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    percent: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    radius: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      dashArray: <span class="built_in">Math</span>.PI * <span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">      dashOffset() &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1</span> - <span class="keyword">this</span>.percent) * <span class="keyword">this</span>.dashArray</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped lang="stylus"&gt;</span></span><br><span class="line"><span class="regexp">  .progress-circle</span></span><br><span class="line"><span class="regexp">    position: relative</span></span><br><span class="line"><span class="regexp">    circle </span></span><br><span class="line"><span class="regexp">      transform-origin: center</span></span><br><span class="line"><span class="regexp">      stroke-linecap: round</span></span><br><span class="line"><span class="regexp">      &amp;.progress-background</span></span><br><span class="line"><span class="regexp">        stroke-width: 5px</span></span><br><span class="line"><span class="regexp">        stroke: #e7eef2</span></span><br><span class="line"><span class="regexp">        transform: scale(0.9)</span></span><br><span class="line"><span class="regexp">      &amp;.progress-bar</span></span><br><span class="line"><span class="regexp">        stroke-width: 8px</span></span><br><span class="line"><span class="regexp">        transform: scale(0.9) rotate(-90deg)</span></span><br><span class="line"><span class="regexp">        transition: stroke-dashoffset 0.5s ease;</span></span><br><span class="line"><span class="regexp">        stroke: #00b04d</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">progress-circle</span> <span class="attr">radius</span>=<span class="string">"100px"</span> <span class="attr">:percent</span>=<span class="string">"0.6"</span>&gt;</span><span class="tag">&lt;/<span class="name">progress-circle</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：如果要看到下面的动画效果，需要将percent参数设置为变量，然后修改其值。</p></blockquote><p>效果：</p><p><img src="http://ob9qd20l4.bkt.clouddn.com/image-6%E6%9C%88-26-2018%2022-52-21.gif" alt=""></p><p>推荐阅读：<br><a href="https://www.zhangxinxu.com/wordpress/2014/04/animateion-line-drawing-svg-path-%E5%8A%A8%E7%94%BB-%E8%B7%AF%E5%BE%84/" target="_blank" rel="noopener">纯CSS实现帅气的SVG路径描边动画效果</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;可缩放矢量图形（Scalable Vector Graphics，SVG)，是一种用来描述二维矢量图形的 XML 标记语言。 简单地说，SVG 面向图形，HTML 面向文本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;hig
      
    
    </summary>
    
      <category term="前端" scheme="http://arthas.com.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="svg" scheme="http://arthas.com.cn/tags/svg/"/>
    
  </entry>
  
  <entry>
    <title>nodejs日志框架winston配置</title>
    <link href="http://arthas.com.cn/2018/06/22/nodejs%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6winston%E9%85%8D%E7%BD%AE/"/>
    <id>http://arthas.com.cn/2018/06/22/nodejs日志框架winston配置/</id>
    <published>2018-06-22T01:27:20.000Z</published>
    <updated>2018-06-23T03:19:36.064Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、日志级别："><a href="#一、日志级别：" class="headerlink" title="一、日志级别："></a>一、日志级别：</h2><p><a href="https://www.npmjs.com/package/winston" target="_blank" rel="noopener">winston</a>是为nodejs开发的日志框架。winston默认定义了6中状态，级别由高到低依次是：<br><code>error</code>、<code>warn</code>、<code>info</code>、<code>verbose</code>、<code>debug</code>、<code>silly</code>。</p><h2 id="二、-输出策略"><a href="#二、-输出策略" class="headerlink" title="二、 输出策略"></a>二、 输出策略</h2><ol><li><p>运行日志根据日期命名，例如‘app-2018-06-19.log’</p></li><li><p>支持自定义保存天数，目前定义14天，不配置可不删除旧文件</p></li><li><p>日期格式化：‘YYYY-MM-DD HH:mm:ss’</p></li><li><p>日志输入格式：json</p></li><li><p>‘error’级日志独立输出</p></li><li><p>支持控制台输出</p></li></ol><h2 id="三、-logger对象的接口"><a href="#三、-logger对象的接口" class="headerlink" title="三、 logger对象的接口"></a>三、 logger对象的接口</h2><ol><li><p>logger.error( msg )    : 打印error级别的日志</p></li><li><p>logger. warn( msg )：打印warn级别的日志</p></li><li><p>logger.info( msg ) : 打印info级别的日志</p></li><li><p>logger. verbose( msg )：打印verbose （冗长的） 级别的日志</p></li><li><p>logger. debug( msg )：打印debug级别的日志</p></li><li><p>logger. silly( msg )：打印silly（愚蠢的）基本的日志</p></li></ol><h2 id="四、-代码配置"><a href="#四、-代码配置" class="headerlink" title="四、 代码配置"></a>四、 代码配置</h2><p>定义logger.js文件:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> winston = <span class="built_in">require</span>(<span class="string">'winston'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'winston-daily-rotate-file'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误信息日志</span></span><br><span class="line"><span class="keyword">const</span> ERROR_LOG_NAME = <span class="string">'./logs/error.log'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有运行日志</span></span><br><span class="line"><span class="keyword">const</span> APP_LOG_NAME = <span class="string">'./logs/app-%DATE%.log'</span></span><br><span class="line"><span class="comment">// 保存天数</span></span><br><span class="line"><span class="keyword">const</span> SAVE_DAYS = <span class="string">'14d'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 日志级别</span></span><br><span class="line"><span class="keyword">const</span> levels = &#123;</span><br><span class="line">  error: <span class="number">0</span>,</span><br><span class="line">  warn: <span class="number">1</span>,</span><br><span class="line">  info: <span class="number">2</span>,</span><br><span class="line">  verbose: <span class="number">3</span>,</span><br><span class="line">  debug: <span class="number">4</span>,</span><br><span class="line">  silly: <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式化输出内容</span></span><br><span class="line"><span class="keyword">const</span> formatter = winston.format.combine(</span><br><span class="line">  winston.format.json(),</span><br><span class="line">  winston.format.timestamp(&#123; <span class="attr">format</span>: <span class="string">'YYYY-MM-DD HH:mm:ss'</span> &#125;),</span><br><span class="line">  winston.format.printf(<span class="function"><span class="params">info</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 输出格式</span></span><br><span class="line">    <span class="comment">// TODO message字段是Symbol对象，对于error级的日志，需要遍历message的Symbol拿到error对象</span></span><br><span class="line">    <span class="keyword">const</span> showInfo = &#123; <span class="attr">time</span>: info.timestamp, <span class="attr">pid</span>: process.pid, <span class="attr">level</span>: info.level, <span class="attr">message</span>: info.message&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(showInfo)</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> logger = winston.createLogger(&#123;</span><br><span class="line">  levels: levels,</span><br><span class="line">  format: formatter,</span><br><span class="line">  transports: [</span><br><span class="line">    <span class="comment">// 'error'级别的日志处理</span></span><br><span class="line">    <span class="keyword">new</span> winston.transports.File(&#123; </span><br><span class="line">      level: <span class="string">'error'</span>,</span><br><span class="line">      filename: ERROR_LOG_NAME</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// '所有的日志处理, maxFiles是回滚时间，超时会删除旧文件，如果不设置，则不会删除'</span></span><br><span class="line">    <span class="keyword">new</span> (winston.transports.DailyRotateFile)(&#123;</span><br><span class="line">      filename: APP_LOG_NAME,</span><br><span class="line">      zippedArchive: <span class="literal">true</span>,</span><br><span class="line">      maxFiles: SAVE_DAYS</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 控制台输出</span></span><br><span class="line">    <span class="keyword">new</span> winston.transports.Console(&#123;&#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = logger;</span><br></pre></td></tr></table></figure><p>将事件转换为GMT时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式化输出内容</span></span><br><span class="line"><span class="keyword">const</span> formatter = winston.format.combine(</span><br><span class="line">  <span class="comment">// 参数Z将指定时间为GMT时间，即格林尼治时间</span></span><br><span class="line">  winston.format.timestamp(&#123; <span class="attr">format</span>: <span class="string">'YYYY-MM-DD HH:mm:ss Z'</span>&#125;), <span class="comment">// &#123; format: 'YYYY-MM-DD HH:mm:ss' &#125;</span></span><br><span class="line">  winston.format.printf(<span class="function"><span class="params">info</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 输出格式</span></span><br><span class="line">    <span class="keyword">const</span> showInfo = &#123; <span class="attr">time</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(info.timestamp).toUTCString(), <span class="attr">pid</span>: process.pid, <span class="attr">level</span>: info.level, <span class="attr">message</span>: info.message&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(showInfo)</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、日志级别：&quot;&gt;&lt;a href=&quot;#一、日志级别：&quot; class=&quot;headerlink&quot; title=&quot;一、日志级别：&quot;&gt;&lt;/a&gt;一、日志级别：&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/winston&quot; ta
      
    
    </summary>
    
      <category term="后端" scheme="http://arthas.com.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="nodejs" scheme="http://arthas.com.cn/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>用stylus写CSS</title>
    <link href="http://arthas.com.cn/2018/06/21/%E7%94%A8stylus%E5%86%99CSS/"/>
    <id>http://arthas.com.cn/2018/06/21/用stylus写CSS/</id>
    <published>2018-06-21T09:47:58.000Z</published>
    <updated>2018-06-21T10:16:56.716Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、定义变量"><a href="#1、定义变量" class="headerlink" title="1、定义变量"></a>1、定义变量</h2><p>对于项目全局统一使用的主题色，可以定义成变量。</p><p>variable.styl文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$color-grey = #666</span><br></pre></td></tr></table></figure><p>需要使用的文件：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"../stylus/variable.styl"</span></span><br><span class="line"></span><br><span class="line">.item</span><br><span class="line">color: $font-color</span><br></pre></td></tr></table></figure><h2 id="2、定义方法"><a href="#2、定义方法" class="headerlink" title="2、定义方法"></a>2、定义方法</h2><p>对于重复用到的样式块，可以定义成一个方法，使用的时候直接传变量即可。</p><p>mixin.styl文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bg-image($url)</span><br><span class="line">  background-image: url($url)</span><br></pre></td></tr></table></figure><p>需要使用的文件：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"../stylus/variable.styl"</span></span><br><span class="line"></span><br><span class="line">.item</span><br><span class="line">bg-image(<span class="string">"pic.png"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、定义变量&quot;&gt;&lt;a href=&quot;#1、定义变量&quot; class=&quot;headerlink&quot; title=&quot;1、定义变量&quot;&gt;&lt;/a&gt;1、定义变量&lt;/h2&gt;&lt;p&gt;对于项目全局统一使用的主题色，可以定义成变量。&lt;/p&gt;
&lt;p&gt;variable.styl文件：&lt;/p&gt;
&lt;f
      
    
    </summary>
    
      <category term="前端" scheme="http://arthas.com.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://arthas.com.cn/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>websocket长连接及心跳实现</title>
    <link href="http://arthas.com.cn/2018/04/23/websocket%E9%95%BF%E8%BF%9E%E6%8E%A5%E5%8F%8A%E5%BF%83%E8%B7%B3%E5%AE%9E%E7%8E%B0/"/>
    <id>http://arthas.com.cn/2018/04/23/websocket长连接及心跳实现/</id>
    <published>2018-04-23T12:30:07.000Z</published>
    <updated>2018-06-21T10:22:00.333Z</updated>
    
    <content type="html"><![CDATA[<p>WebSocket 是一种网络通信协议，很多高级功能都需要它。它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种。<a href="https://github.com/websockets/ws" target="_blank" rel="noopener">ws</a>是一个nodejs的websocket实现，通过这个包可以创建一个简单的websocket服务：</p><h1 id="创建websocket长连接服务"><a href="#创建websocket长连接服务" class="headerlink" title="创建websocket长连接服务"></a>创建websocket长连接服务</h1><p><strong>服务端</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> WebSocketServer = <span class="built_in">require</span>(<span class="string">'ws'</span>).Server;</span><br><span class="line"><span class="keyword">const</span> wss = <span class="keyword">new</span> WebSocketServer(&#123; <span class="attr">port</span>: <span class="number">8082</span> &#125;);</span><br><span class="line"></span><br><span class="line">wss.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> <span class="title">connection</span>(<span class="params">ws</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'会话已建立'</span>);</span><br><span class="line"></span><br><span class="line">    ws.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> <span class="title">incoming</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'received: %s'</span>, message);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> info = <span class="string">'I`m server info'</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(info);</span><br><span class="line">        ws.send(info);</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">    ws.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'error'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    ws.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">reson</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'close'</span>, reson);</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>客户端</strong></p><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"show"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> count = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> url = <span class="string">"ws://192.168.199.131:8082"</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(url);</span></span><br><span class="line"><span class="javascript">        ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'和服务端建立连接'</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        ws.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(params);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> showData = count++ + <span class="string">'   '</span> + event.data;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.querySelector(<span class="string">'#show'</span>).innerHTML = showData;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器打开index.html并观察控制台，可以看到服务端发送过来的信息</p><p><img src="http://ob9qd20l4.bkt.clouddn.com/image-websocket1.png" alt=""></p><p>此时手机和电脑连接到同一个网络，手机访问也是可以实现连接。</p><p>但是目前的服务存在以下问题：</p><ol><li>长时间不发送数据，运营商或者部分防火墙会关闭该连接，服务端无感知</li><li>客户端和服务端之间断开网络，服务端无感知</li></ol><p>服务端会继续向客户端发送数据，导致服务端连接不能及时关闭造成资源占用和数据丢失。可以试试在手机访问的时候，断开手机网络，服务端依然给发送数据。</p><p><strong>所以需要心跳包来监测客户端是否在线</strong>。</p><h1 id="心跳包"><a href="#心跳包" class="headerlink" title="心跳包"></a>心跳包</h1><p>心跳包的实现原理：</p><blockquote><p>websocket协议定义了心跳机制，一方可以通过发送ping（opcode 0x9）消息给另一方，另一方收到ping后应该尽可能快的返回pong（0xA）。</p></blockquote><p>如果客户端支持ping，最好由客户端发起ping，然后服务器记录时间，超时断开即可。浏览器中没有相关api发送ping给服务器，只能由服务器发ping给浏览器。</p><p>对上述服务端代码进行改进，加入心跳机制，每隔3s从服务端发送ping，浏览器在收到之后给服务器回复pong，服务端监听pong：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> WebSocketServer = <span class="built_in">require</span>(<span class="string">'ws'</span>).Server;</span><br><span class="line"><span class="keyword">const</span> wss = <span class="keyword">new</span> WebSocketServer(&#123; <span class="attr">port</span>: <span class="number">8082</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">noop</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'noop'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">heartbeat</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.isAlive = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wss.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> <span class="title">connection</span>(<span class="params">ws</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'会话已建立'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> info = <span class="string">'I`m server info'</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(info);</span><br><span class="line">        ws.send(info);</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">    ws.isAlive = <span class="literal">true</span>;</span><br><span class="line">    ws.on(<span class="string">'pong'</span>, heartbeat);</span><br><span class="line">    <span class="keyword">const</span> interval = setInterval(<span class="function"><span class="keyword">function</span> <span class="title">ping</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        wss.clients.forEach(<span class="function"><span class="keyword">function</span> <span class="title">each</span>(<span class="params">ws</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (ws.isAlive === <span class="literal">false</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> ws.terminate();</span><br><span class="line">            &#125;</span><br><span class="line">            ws.isAlive = <span class="literal">false</span>;</span><br><span class="line">            ws.ping(noop);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">    ws.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> <span class="title">incoming</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'received: %s'</span>, message);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    ws.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'error'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    ws.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">reson</span>) </span>&#123;</span><br><span class="line">     clearInterval(timer);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'close'</span>, reson);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>通过抓包可以看到ping pong的过程：<br><img src="http://ob9qd20l4.bkt.clouddn.com/image-websocket2.png" alt=""></p><p>这样当收不到浏览器的时候，由于isAlive为false，会执行ws.terminate()关闭连接和其他清理工作。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="http://blog.techbeta.me/2015/12/websocket/" target="_blank" rel="noopener">websocket ,ping pong heardbeat心跳机制</a></li><li><a href="https://github.com/websockets/ws" target="_blank" rel="noopener">ws doc</a></li><li><a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html" target="_blank" rel="noopener">websocket教程</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;WebSocket 是一种网络通信协议，很多高级功能都需要它。它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种。&lt;a href=&quot;https://github.com/websockets/w
      
    
    </summary>
    
      <category term="网络" scheme="http://arthas.com.cn/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="websocket" scheme="http://arthas.com.cn/tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的闭包</title>
    <link href="http://arthas.com.cn/2018/03/30/JavaScript%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85/"/>
    <id>http://arthas.com.cn/2018/03/30/JavaScript中的闭包/</id>
    <published>2018-03-30T08:44:34.000Z</published>
    <updated>2018-03-30T13:10:04.850Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、变量作用域"><a href="#1、变量作用域" class="headerlink" title="1、变量作用域"></a>1、变量作用域</h2><p>一个变量的作用域（scope）是程序源代码中定义这个变量的区域。全局变量拥有全局作用域，在JavaScript代码中的任何地方都是有定义的。然而在函数内声明的变量只在函数体内有定义。它们是局部变量，作用域是局部性的。函数参数也是局部变量，它们只在函数体内有定义。</p><p>在函数体内，局部变量的优先级高于同名的全局变量。如果在函数内声明的一个局部变量或者函数参数中带有的变量和全局变量重名，那么全局变量就被局部变量所遮盖。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = <span class="string">'global'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkScope</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> scope = <span class="string">'local'</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(scope);<span class="comment">// local</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">checkScope()</span><br></pre></td></tr></table></figure><p>声明局部变量时必须使用var，否则该操作会创建全局变量。<br>函数定义是可以嵌套的。由于每个函数都有它自己的作用域，因此会出现几个局部作用域嵌套的情况，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = <span class="string">'global scope'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkScope</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> scope = <span class="string">'local scope'</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">nested</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> scope = <span class="string">'nested scope'</span>;</span><br><span class="line">      <span class="keyword">return</span> scope;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nested();</span><br><span class="line">&#125;</span><br><span class="line">checkScope()<span class="comment">// nested scope</span></span><br></pre></td></tr></table></figure><h3 id="1-1、函数作用域和声明提前"><a href="#1-1、函数作用域和声明提前" class="headerlink" title="1.1、函数作用域和声明提前"></a>1.1、函数作用域和声明提前</h3><p>在一些类似C语言的编程语言中，花括号内的每一段代码都是具有各自的作用域，而且变量在声明它们的代码段之外是不可见的，我们称为块级作用域（block scope），而JavaScript中没有块级作用域。JavaScript取而代之地使用了函数作用域（function scope）：变量在声明它们的函数体以及这个函数体嵌套的任意函数体内都是定义的。</p><p>在如下所示的代码中，在不同位置定义了变量i，j和k，它们都在同一个作用域内——这三个变量在函数体内均是有定义的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>;                          <span class="comment">// i在整个函数体内都是有定义的</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> o == <span class="string">'object'</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> j = <span class="number">0</span>;                      <span class="comment">// j在整个函数体内是有定义的，不仅仅是在这个代码段内</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; <span class="number">10</span>; k++) &#123;  <span class="comment">// k在函数体内是有定义的，不仅仅是在这个代码段内</span></span><br><span class="line">          <span class="built_in">console</span>.log(k);             <span class="comment">// 输出数字0-9</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(k);                 <span class="comment">// k已经定义了，输出数字10</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(j);                     <span class="comment">// j已经定义了，但是可能没有初始化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JavaScript的函数作用域是指在函数体内声明的所有变量在函数体内始终是可见的。有意思的是，这意味着变量在声明之前甚至已经可用。JavaScript的这个特性被非正式的称为声明提前(hoisting，或者变量提升)，即JavaScript函数里声明的所有变量（但不涉及赋值）都被“提前”至函数体的顶部，看如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = <span class="string">'global'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(scope);     <span class="comment">// 输出undefined，而不是global</span></span><br><span class="line">  <span class="keyword">var</span> scope = <span class="string">'local'</span>;    <span class="comment">// 变量在这里赋初始值，但变量本身在函数体内任何地方均是有定义的</span></span><br><span class="line">  <span class="built_in">console</span>.log(scope);     <span class="comment">// 输出local</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码相当于如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = <span class="string">'global'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> scope</span><br><span class="line">  <span class="built_in">console</span>.log(scope);</span><br><span class="line">  scope = <span class="string">'local'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(scope);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以一些程序员特意将变量声明放在函数体顶部。</p><h3 id="1-2、作为属性的变量"><a href="#1-2、作为属性的变量" class="headerlink" title="1.2、作为属性的变量"></a>1.2、作为属性的变量</h3><p>当声明一个JavaScript全局变量时，实际上是定义了全局对象的一个属性。当使用var声明一个变量时，创建的这个属性是不可配置的，也就是说这个变量无法通过delete运算符删除。如果没有使用严格模式并给一个未声明的变量赋值的话，JavaScript会自动创建一个全局变量。以这种方式创建的变量是全局对象的正常的可配置属性，并可以删除它们。</p><p>JavaScript全局变量是全局对象的属性，这是在ECMAScript规范中强制规定的。对于局部变量则没有如此规定，但我们可以想象得到，局部变量当做跟函数调用相关的某个对象的属性，局部变量当做跟函数调用相关的某个对象的属性。ECMAScript3规范称该对象为调用对象，ECMAScript5规范称为声明上下文对象。JavaScript可以允许使用this关键字来引用全局对象，却没有方法可以引用局部变量中存放的对象。</p><h2 id="2、闭包"><a href="#2、闭包" class="headerlink" title="2、闭包"></a>2、闭包</h2><p>JavaScript函数对象的内部状态不仅包含函数的代码逻辑，还必须引用当前的作用域链。函数对象可以通过作用域相互关联起来，函数体内部的变量都可以保存在函数作用域内，这种特性在计算机科学文献中称为“闭包”。</p><p>从技术的角度讲，所有的JavaScript函数都是闭包：它们都是对象，它们都关联到作用域链。当调用函数时闭包所指向的作用域链和定义函数时的作用域链不是同一个作用域链时，事情就变的非常微妙。当一个函数调用了另外一个函数，外部函数将嵌套的函数对象作为返回值返回的时候往往会发生这种事情。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = <span class="string">'global scope'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkScope</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> scope = <span class="string">'local scope'</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> scope;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> f();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">checkScope()  <span class="comment">// 返回local scope</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = <span class="string">'global scope'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkScope</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> scope = <span class="string">'local scope'</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> scope;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">checkScope()()<span class="comment">// 返回local scope</span></span><br></pre></td></tr></table></figure><p>在这段代码中，我们将函数内的一对圆括号移动到了checkScope()之后。checkScope()现在仅仅返回函数内嵌套的一个函数对象，而不是直接返回结果。在定义函数的作用域外面，调用这个嵌套的函数(包含最后一行代码的最后一对圆括号)会发生什么事情呢？</p><p>回想一下词法作用域的基本规则，JavaScript函数的执行用到了作用域链，这个作用域链是函数定义的时候创建的。嵌套的函数f()定义在这个作用域链里，其中的变量scope一定是局部变量，不管在何时何地执行函数f()，这种绑定在执行f()时依然有效。因此最后一行代码返回“local scope”而不是“global scope”。简言之，闭包的这个特性强大到让人吃惊：它们可以捕捉到局部变量（和参数），并一直保存下来，看起来像这些变量绑定到了在其中定义它们的外部函数。</p><p>参考资料<br>《JavaScript权威指南》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、变量作用域&quot;&gt;&lt;a href=&quot;#1、变量作用域&quot; class=&quot;headerlink&quot; title=&quot;1、变量作用域&quot;&gt;&lt;/a&gt;1、变量作用域&lt;/h2&gt;&lt;p&gt;一个变量的作用域（scope）是程序源代码中定义这个变量的区域。全局变量拥有全局作用域，在JavaS
      
    
    </summary>
    
      <category term="前端" scheme="http://arthas.com.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://arthas.com.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>求第k大问题的解法</title>
    <link href="http://arthas.com.cn/2018/03/15/%E6%B1%82%E7%AC%ACk%E5%A4%A7%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E6%B3%95/"/>
    <id>http://arthas.com.cn/2018/03/15/求第k大问题的解法/</id>
    <published>2018-03-15T06:38:42.000Z</published>
    <updated>2018-03-15T07:16:11.475Z</updated>
    
    <content type="html"><![CDATA[<p>leetcode第215号题目<a href="https://leetcode.com/problems/kth-largest-element-in-an-array/description/" target="_blank" rel="noopener">Kth Largest Element in an Array</a></p><blockquote><p>Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.<br>For example,<br>Given [3,2,1,5,6,4] and k = 2, return 5.</p></blockquote><p>典型的求第K大问题，先上解法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span> nums[], <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> solve(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>, k - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对arr[l, r]部分进行partition操作</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            <span class="keyword">return</span> arr[l];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 随机交换位置</span></span><br><span class="line">        swap(arr, l, (<span class="keyword">int</span>)(Math.random() * (r - l + <span class="number">1</span>) + l));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> v = arr[l];</span><br><span class="line">        <span class="keyword">int</span> j = l;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l + <span class="number">1</span>; i &lt;= r; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; v) &#123;</span><br><span class="line">                j++;</span><br><span class="line">                swap(arr, j, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(arr, l, j);</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 求出nums[l, r]范围里第k大的数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> nums[], <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[l];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> p = partition(nums, l, r);</span><br><span class="line">        <span class="keyword">if</span> (k == p) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[p];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (k &lt; p) &#123;</span><br><span class="line">            <span class="keyword">return</span> solve(nums, l, p - <span class="number">1</span>, k);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> solve(nums, p + <span class="number">1</span>, r, k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该解法的思路是快速排序中的思想，利用partition函数对数组进行分解。</p><p><code>int p = partition(nums, l, r)</code></p><p>此时p位置的数值已经排好了序，即p就是nums[p]的索引值。</p><p>在solve方法中，利用p值将数组分为两部分，如果k等于p，则nums[p]正是所求的第k大值；如果k大于p，则表示第k大值在p的右半部分，再次进入solve进行递归查找；如果k小于p，同理，在p的左侧进行递归查找。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;leetcode第215号题目&lt;a href=&quot;https://leetcode.com/problems/kth-largest-element-in-an-array/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Kth La
      
    
    </summary>
    
      <category term="编程基础" scheme="http://arthas.com.cn/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Algorithms" scheme="http://arthas.com.cn/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>CSS之布局</title>
    <link href="http://arthas.com.cn/2018/03/14/CSS%E4%B9%8B%E5%B8%83%E5%B1%80/"/>
    <id>http://arthas.com.cn/2018/03/14/CSS之布局/</id>
    <published>2018-03-14T06:24:28.000Z</published>
    <updated>2018-03-14T06:26:46.953Z</updated>
    
    <content type="html"><![CDATA[<p>所有CSS布局技术的根本都是3个基本概念：定位、浮动和外边距操纵</p><h2 id="计划布局"><a href="#计划布局" class="headerlink" title="计划布局"></a>计划布局</h2><ul><li>检查设计，寻找重复的模式，</li><li>注意结构和意义</li><li>标注设计稿</li><li>定义元素</li></ul><h2 id="设置基本结构"><a href="#设置基本结构" class="headerlink" title="设置基本结构"></a>设置基本结构</h2><p>比如一个典型的三列博客模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &lt;div class="</span><span class="attr">header</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用外边距让设计居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">920px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基于浮动的布局"><a href="#基于浮动的布局" class="headerlink" title="基于浮动的布局"></a>基于浮动的布局</h2><p>当使用浮动时，他们不再在文档流中占据任何空间，这会导致页脚向上升，为了避免这种情况，需要对他们的父元素应用溢出方法，从而清除浮动元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h2><p>在使用流式布局时，尺寸是用百分数而不是像素设置的，这使流式布局能够相对于浏览器窗口进行伸缩。但是在窗口缩小时，行变得非常窄，很难阅读，在多列布局中尤其如此。因此，有必要添加像素或者em为单位的<code>mix-width</code>，从而防止布局变得太窄，但是如果<code>mix-width</code>设置的太大，流式设计也会遇到与固定宽度布局相同的限制。</p><h2 id="弹性布局"><a href="#弹性布局" class="headerlink" title="弹性布局"></a>弹性布局</h2><p>弹性布局相对于字号（而不是浏览器宽度）来设置浏览器宽度。以em为单位设置宽度，可以确保在字号增大时整个布局随之扩大，</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;所有CSS布局技术的根本都是3个基本概念：定位、浮动和外边距操纵&lt;/p&gt;
&lt;h2 id=&quot;计划布局&quot;&gt;&lt;a href=&quot;#计划布局&quot; class=&quot;headerlink&quot; title=&quot;计划布局&quot;&gt;&lt;/a&gt;计划布局&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;检查设计，寻找重复的模式，&lt;/l
      
    
    </summary>
    
      <category term="前端" scheme="http://arthas.com.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://arthas.com.cn/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>CSS之盒子模型</title>
    <link href="http://arthas.com.cn/2018/03/14/CSS%E4%B9%8B%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
    <id>http://arthas.com.cn/2018/03/14/CSS之盒子模型/</id>
    <published>2018-03-14T06:21:06.000Z</published>
    <updated>2018-03-14T06:22:24.809Z</updated>
    
    <content type="html"><![CDATA[<h2 id="盒模型概述"><a href="#盒模型概述" class="headerlink" title="盒模型概述"></a>盒模型概述</h2><ul><li>增加内边距、边框和外边距不会影响内容区域的尺寸，但是会增加元素框的尺寸</li><li>如果在元素上添加背景，那么背景会应用于由内容和内边距组成的区域</li><li>外边框是透明的，一般是用他控制元素之间的间距</li><li>outline（轮廓）绘制元素框之上，不影响元素的大小或定位</li></ul><h2 id="IE和盒模型"><a href="#IE和盒模型" class="headerlink" title="IE和盒模型"></a>IE和盒模型</h2><p>自从1996年CSS1的推出，W3C组织就建议把所有网页上的对像都放在一个盒(box)中，设计师可以通过创建定义来控制这个盒的属性，这些对像包括段落、列表、标题、图片以及层<br>在W3C盒模型中，一个块级元素的总宽度按照如下的方程式计算：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">总宽度 = margin-left + border-left + padding-left + width + padding-right + border-right + margin-right</span><br></pre></td></tr></table></figure><p>IE盒模型计算方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">总宽度 = margin-left + width + margin-right</span><br></pre></td></tr></table></figure><blockquote><p>即W3C的盒模型中content不包括padding,border和margin，IE盒模型的content包括padding和border，不包括margin.</p></blockquote><p>关于IE的版本<br>IE5.5及更早的版本使用的是IE盒模型。很多人似乎没注意到IE6及更新的版本在标准兼容模式（standards compliant mode）下使用的是W3C的盒模型标准。我们说这是一个好消息因为这意味着此盒模型问题只会出现在IE5.5及其更早的版本中。只要为文档设置一个DOCTYPE，就会使得IE遵循标准兼容模式的方式工作。<br>但是你如果非要用IE盒模型，CSS3提供了可能，可通过<code>box-sizing:border-box</code>指定。</p><p>参考：<a href="http://www.osmn00.com/translation/213.html" target="_blank" rel="noopener">IE浏览器和CSS盒模型</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;盒模型概述&quot;&gt;&lt;a href=&quot;#盒模型概述&quot; class=&quot;headerlink&quot; title=&quot;盒模型概述&quot;&gt;&lt;/a&gt;盒模型概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;增加内边距、边框和外边距不会影响内容区域的尺寸，但是会增加元素框的尺寸&lt;/li&gt;
&lt;li&gt;如果在元素上添
      
    
    </summary>
    
      <category term="前端" scheme="http://arthas.com.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://arthas.com.cn/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>CSS之选择器</title>
    <link href="http://arthas.com.cn/2018/03/14/CSS%E4%B9%8B%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>http://arthas.com.cn/2018/03/14/CSS之选择器/</id>
    <published>2018-03-14T06:14:55.000Z</published>
    <updated>2018-03-14T06:18:20.228Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><ul><li>伪类选择器<ul><li><code>:link</code>  <code>:visited</code>  –链接伪类，只能应用于锚元素</li><li><code>:hover</code>  <code>:active</code>  <code>:focus</code>  –动态伪类，理论上可以引用于任何元素</li></ul></li><li>通用选择器 ：<code>* {}</code></li><li>子选择器和相邻选择器(<code>#nav&gt;li</code>)</li><li>属性选择器：<code>acronym[title]</code>(具有title属性的acronym元素)，还可以根据属性值应用样式<code>a[rel=&quot;nofollow&quot;]</code></li><li>ID选择器</li><li>类选择器</li></ul><h2 id="CSS选择器的优先级"><a href="#CSS选择器的优先级" class="headerlink" title="CSS选择器的优先级"></a>CSS选择器的优先级</h2><p>!important &gt;  id &gt; class &gt; tag</p><h2 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h2><blockquote><p>基本上，用style属性编写的规则总是比其他任何规则特殊，具有ID选择器的规则比没有ID选择器的规则特殊，具有类选择器的规则比只有类选择器的规则特殊。<br>如果两个规则的特殊性相同，那么后定义的规则优先。</p></blockquote><p>CSS定义的权重</p><p>以下是权重的规则：标签的权重为1，class的权重为10，id的权重为100，以下例子是演示各种定义的权重值：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*权重为1*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*权重为10*/</span></span><br><span class="line"><span class="selector-class">.class1</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*权重为100*/</span></span><br><span class="line"><span class="selector-id">#id1</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*权重为100+1=101*/</span></span><br><span class="line"><span class="selector-id">#id1</span> <span class="selector-tag">div</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*权重为10+1=11*/</span></span><br><span class="line"><span class="selector-class">.class1</span> <span class="selector-tag">div</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*权重为10+10+1=21*/</span></span><br><span class="line"><span class="selector-class">.class1</span> <span class="selector-class">.class2</span> <span class="selector-tag">div</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="应用样式"><a href="#应用样式" class="headerlink" title="应用样式"></a>应用样式</h2><p>1、链接样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/css/basic.css"</span> <span class="attr">ref</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css /&gt;</span></span></span><br></pre></td></tr></table></figure><p>2、导入样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> url(/css/advanced.css)</span><br></pre></td></tr></table></figure><p>注意：导入样式表比链接样式表要慢</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CSS选择器&quot;&gt;&lt;a href=&quot;#CSS选择器&quot; class=&quot;headerlink&quot; title=&quot;CSS选择器&quot;&gt;&lt;/a&gt;CSS选择器&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;伪类选择器&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:link&lt;/code&gt;  &lt;code&gt;:visited
      
    
    </summary>
    
      <category term="前端" scheme="http://arthas.com.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://arthas.com.cn/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>前端常见问题解答总结</title>
    <link href="http://arthas.com.cn/2018/03/14/%E5%89%8D%E7%AB%AF%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E7%AD%94%E6%80%BB%E7%BB%93/"/>
    <id>http://arthas.com.cn/2018/03/14/前端常见问题解答总结/</id>
    <published>2018-03-14T03:20:37.000Z</published>
    <updated>2018-03-14T06:23:34.083Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、前端性能优化常用的方法"><a href="#1、前端性能优化常用的方法" class="headerlink" title="1、前端性能优化常用的方法"></a>1、前端性能优化常用的方法</h2><ul><li>通过CSS Sprites减少http请求次数，JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，增加静态资源服务器。</li><li>避免在页面的主体布局中使用table table要等其中的内容完全下载之后才会显示出来，显示比div+css布局慢。</li><li>使用缓存技术</li></ul><h2 id="2、常见的http状态码"><a href="#2、常见的http状态码" class="headerlink" title="2、常见的http状态码"></a>2、常见的http状态码</h2><table><thead><tr><th>状态码</th><th>说明</th></tr></thead><tbody><tr><td>200</td><td>服务器已成功处理了请求</td></tr><tr><td>301</td><td>请求的文档在其他地方，新的URL在Location头中给出，浏览器应该自动地访问新的URL</td></tr><tr><td>302</td><td>类似于301，但新的URL应该被视为临时性的替代，而不是永久性的</td></tr><tr><td>304</td><td>自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容</td></tr><tr><td>403</td><td>服务器拒绝访问，资源不可用</td></tr><tr><td>404</td><td>请求的资源不存在</td></tr><tr><td>500</td><td>服务器内部错误</td></tr><tr><td>502</td><td>服务器作为网关或者代理时，为了完成请求访问下一个服务器，但该服务器返回了非法的应答</td></tr></tbody></table><h2 id="3、一个div的居中问题"><a href="#3、一个div的居中问题" class="headerlink" title="3、一个div的居中问题"></a>3、一个div的居中问题</h2><p><strong>水平居中</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>垂直居中</strong></p><p>以下均可以实现水平居中的同时垂直居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">margin-top</span>: -<span class="number">100px</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: -<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对div中的元素水平垂直居中</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>:center;</span><br><span class="line">  <span class="attribute">justify-content</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script async src="//jsfiddle.net/mohong/8u4sxm2a/10/embed/html,css,result/"></script><h2 id="4、外边距叠加"><a href="#4、外边距叠加" class="headerlink" title="4、外边距叠加"></a>4、外边距叠加</h2><p>当两个或者更多垂直外边距相遇时，它们将形成一个外边距，这个外边距的高等于两个发生叠加的外边距的高度中的较大者</p><ul><li>当一个元素包含在另一个元素中时，它们的顶和/或底外边距也会发生叠加</li><li>外边距可以与可以与本身叠加（空元素，有外边距，但没有边框和内边距，顶外边距与底外边距就碰到一起了，它们会发生叠加）</li><li>只有普通文档流中块框的垂直外边距才会发生外边距叠加。行内框，浮动框或者绝对定位框之间的外边距不会叠加</li></ul><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><p>常见的清除浮动的方法</p><ul><li>在最后面增加一个元素，并且对其添加加<code>clear:both</code>属性</li><li>父元素增加<code>overflow:hidden</code>属性</li><li>伪元素<code>:after</code>添加<code>clear:both</code>属性</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、前端性能优化常用的方法&quot;&gt;&lt;a href=&quot;#1、前端性能优化常用的方法&quot; class=&quot;headerlink&quot; title=&quot;1、前端性能优化常用的方法&quot;&gt;&lt;/a&gt;1、前端性能优化常用的方法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;通过CSS Sprites减少http请
      
    
    </summary>
    
      <category term="前端" scheme="http://arthas.com.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="问题" scheme="http://arthas.com.cn/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的类和模块</title>
    <link href="http://arthas.com.cn/2018/03/07/JavaScript%E7%9A%84%E7%B1%BB%E5%92%8C%E6%A8%A1%E5%9D%97/"/>
    <id>http://arthas.com.cn/2018/03/07/JavaScript的类和模块/</id>
    <published>2018-03-07T07:05:30.000Z</published>
    <updated>2018-03-13T06:21:28.331Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript中类的一个重要特性是“动态可继承”。在JavaScript中，类的所有实例对象都从同一个原型对象上继承属性。因此，原型对象是类的核心。当且仅当两个对象继承自同一个原型对象时，它们才是属于同一个类的实例。</p><h3 id="1、constructor"><a href="#1、constructor" class="headerlink" title="1、constructor"></a><strong>1、constructor</strong></h3><p>任何JavaScript函数都可以用作构造函数，并且调用构造函数是需要用到一个prototype属性的。因此，每个JavaScript函数(ECMAScript5中的Function.bind()方法返回的函数除外)都自动拥有一个prototype属性。这个属性的值是一个对象，这个对象包含唯一一个不可枚举属性constructor。constructor的属性的值是一个函数对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> P = F.prototype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = P.constructor;</span><br><span class="line"></span><br><span class="line">c === F;</span><br></pre></td></tr></table></figure><p>这意味着对象通常继承的constructor均指代它们的构造函数。由于构造函数是类的“公共标识”，因此这个constructor属性为对象提供了类。</p><h4 id="2、类的扩充"><a href="#2、类的扩充" class="headerlink" title="2、类的扩充"></a><strong>2、类的扩充</strong></h4><p>JavaScript中基于原型的继承机制是动态的：对象从其原型继承属性，如果创建对象之后原型的属性发生改变，也会影响到继承这个原型的所有实例对象。这意味着我们可以通过给原型对象添加新方法来扩充类。</p><p>构造函数是类的公共标识，但原型是唯一标识，尽管instanceof的右操作符是构造函数，但计算过程实际上是监测了对象的继承关系，而不是监测创建对象的构造函数。</p><h3 id="3、JavaScript中的面向对象技术"><a href="#3、JavaScript中的面向对象技术" class="headerlink" title="3、JavaScript中的面向对象技术"></a><strong>3、JavaScript中的面向对象技术</strong></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JavaScript中类的一个重要特性是“动态可继承”。在JavaScript中，类的所有实例对象都从同一个原型对象上继承属性。因此，原型对象是类的核心。当且仅当两个对象继承自同一个原型对象时，它们才是属于同一个类的实例。&lt;/p&gt;
&lt;h3 id=&quot;1、constructor
      
    
    </summary>
    
      <category term="前端" scheme="http://arthas.com.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://arthas.com.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript面向对象</title>
    <link href="http://arthas.com.cn/2018/03/06/JavaScript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://arthas.com.cn/2018/03/06/JavaScript面向对象/</id>
    <published>2018-03-06T03:46:17.000Z</published>
    <updated>2018-03-13T06:21:42.899Z</updated>
    
    <content type="html"><![CDATA[<p>对象是JavaScript的基本数据类型，可以通过对象直接量、关键字new和（ECMAScript 5中的）Object.create()函数来创建对象。JavaScript对象可以从一个称为原型的对象继承属性，这种“原型式继承”是JavaScript的核心特征，JavaScript对象都是关联数组。 </p><p>对象的属性具有一些属性特性</p><ul><li>可写（writable attribute） 表明是否可以设置该属性的值</li><li>可枚举（enumerable attribute） 表明是否可以通过for/in循环返回该值</li><li>可配置 （configureable attribute） 表明是否可以删除或者修改该属性</li></ul><h3 id="1、创建对象"><a href="#1、创建对象" class="headerlink" title="1、创建对象"></a><strong>1、创建对象</strong></h3><p>1、创建对象最简单的方式是使用对象直接量。直接量是有若干名/值对组成的映射表。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> point = &#123;<span class="attr">x</span>: <span class="number">12</span>, <span class="attr">y</span>: <span class="number">30</span>&#125;;</span><br></pre></td></tr></table></figure><p>所有通过对象直接量创建的对象，都具有同一个原型对象，并可以通过Object.prototype获得对原型对象的引用。</p><p>2、通过new关键字创建</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure><p>通过关键字new和构造函数创建的对象，原型就是构造函数的prototype属性。<br>故通过{}创建的对象和通过new Object()创建的对象原型相同。</p><p>3、Object.create()</p><p>ECMAScript5定义了<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="noopener">Object.create()</a>方法，它创建一个新对象，其中第一个参数是这个对象的原型，第二个参数可选，用以对对象的属性进行进一步描述。</p><p>可以通过传入参数null来创建一个没有原型的对象，但以这种方式创建的对象不会继承任何东西。</p><p>入股偶需要创建一个普通的空对象（比如通过{}或者new Object()创建的对象），需要传入Object.prototype</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype);   <span class="comment">// 和&#123;&#125;、`new Object()`一样</span></span><br></pre></td></tr></table></figure><p>可以通过任意原型创建新对象，（换句话说，可以使任意对象继承），这是一个强大的特性。</p><h3 id="2、原型"><a href="#2、原型" class="headerlink" title="2、原型"></a><strong>2、原型</strong></h3><p>每一个JavaScript对象(null除外)都是从原型继承属性。</p><h3 id="3、继承"><a href="#3、继承" class="headerlink" title="3、继承"></a><strong>3、继承</strong></h3><p>假设要查询对象o的属性x，如果o中不存在x，那么将会继续在o的原型对象中查询属性x，如果原型对象中也没有x，但这个原型对象也有原型，那么继续在这个原型对象的原型上执行查询，直到找到x或者查找到一个原型是null的对象为止。可以看到，对象的原型属性构成了一个“链”，通过这个链可以实现属性的继承。只有在查询属性时才会体会到继承的存在，而设置属性则和继承无关。</p><h3 id="4、属性访问错误"><a href="#4、属性访问错误" class="headerlink" title="4、属性访问错误"></a><strong>4、属性访问错误</strong></h3><p>两种避免属性访问错误的写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 冗余但易懂</span></span><br><span class="line"><span class="keyword">var</span> len = underfined;</span><br><span class="line"><span class="keyword">if</span> (book) &#123;</span><br><span class="line"><span class="keyword">if</span> (book.subtitle) len = book.subtitle.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更简练</span></span><br><span class="line"><span class="keyword">var</span> len = book &amp;&amp; book.subtitle &amp;&amp; book.subtitle.length;</span><br></pre></td></tr></table></figure><h3 id="5、删除属性"><a href="#5、删除属性" class="headerlink" title="5、删除属性"></a><strong>5、删除属性</strong></h3><p>delete属性只能删除自有属性，不能删除继承属性，也不能删除那些可配置属性我false的属性。</p><h3 id="6、监测属性"><a href="#6、监测属性" class="headerlink" title="6、监测属性"></a><strong>6、监测属性</strong></h3><p>可以通过in运算符，hasOwnProperty()和propertyIsEnumerable()判断某个属性是否存在某个对象中。</p><ul><li>in  自由属性和继承属性能找到都返回true；</li><li>hasOwnProperty()  只能找出自由属性；</li><li>propertyIsEnumerable()  只能找出自有属性且这个属性可枚举性为true的属性</li></ul><h3 id="7、枚举属性"><a href="#7、枚举属性" class="headerlink" title="7、枚举属性"></a><strong>7、枚举属性</strong></h3><p>除了监测对象是否存在，还需有遍历对象的所有属性。</p><ul><li>for/in循环可以遍历对象的所有可枚举属性（包括自由属性和可枚举属性）。对象继承的内置方法不可枚举，但在代码中给对象添加的属性都是可枚举的（除非转换成不可枚举的）。</li><li>Object.keys()返回一个数组，这个数组由对象中可枚举的自有属性的名称组成（原理与下面的工具keys类似）。</li><li>Object.getOwnPropertyNames() 与Object.keys()类似，不过返回的不仅仅是可枚举的自由属性，而是会返回对象的所有自有属性的名称。</li></ul><p>以下是一些遍历的工具函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 把p中可枚举的属性复制到o，并返回o</span></span><br><span class="line"><span class="comment"> * 如果p和o含有同名属性，则覆盖o中的属性</span></span><br><span class="line"><span class="comment"> * 这个函数并不处理getter和setter以及复制属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">o, p</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (prop <span class="keyword">in</span> p) &#123;</span><br><span class="line">        o[propk] = p[prop];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 把p中可枚举的属性复制到o，并返回o</span></span><br><span class="line"><span class="comment"> * 如果p和o含有同名属性，则o不受影响</span></span><br><span class="line"><span class="comment"> * 这个函数并不处理getter和setter以及复制属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">o, p</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (prop <span class="keyword">in</span> p) &#123;</span><br><span class="line">        <span class="keyword">if</span> (o.hasOwnProperty[prop]) <span class="keyword">continue</span>;</span><br><span class="line">        o[prop] = p[prop];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回一个数组，包含o中可枚举的自由属性的名字(key) </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keys</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> o !== <span class="string">'object'</span>) <span class="keyword">throw</span> <span class="built_in">TypeError</span>();</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> o) &#123;</span><br><span class="line">        <span class="keyword">if</span> (o.hasOwnProperty[prop]) &#123;</span><br><span class="line">            result.push(prop);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8、属性getter和setter"><a href="#8、属性getter和setter" class="headerlink" title="8、属性getter和setter"></a><strong>8、属性getter和setter</strong></h3><p>在ECMAScript5中，属性值可以用一个或两个方法代替，这两个方法就是getter和setter。由getter，setter定义的属性称为“存储器属性”。它不同于“数据属性”，数据属性只是一个简单的值。</p><p>当程序查询存取器属性的值时，JavaScript调用getter方法，这个方法的返回值就是属性存储器表达式的值。当程序设置一个存储器属性的值时，JavaScript调用setter方法，j将赋值表达式右侧的值作为参数传入setter，从某种意义上讲，这个方法负责设置属性的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj = &#123;</span><br><span class="line">    name: <span class="string">'zhang'</span>,</span><br><span class="line">    get allName () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'get'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;,</span><br><span class="line">    set allName (value) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'set'</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = value;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和数据属性一样，存储器属性也是可以继承的。</p><h3 id="9、属性的特性"><a href="#9、属性的特性" class="headerlink" title="9、属性的特性"></a><strong>9、属性的特性</strong></h3><p>数据属性的4个特性为：</p><ul><li>value  值</li><li>writable  可写性</li><li>enumerable  可枚举性</li><li>configuable  可配置性</li></ul><p>存储器属性的两个特性：</p><ul><li>get  可读性</li><li>set  可写性</li><li>enumerable  可枚举性</li><li>configuable  可配置性</li></ul><p>为了实现属性特性的查询和设置操作，ECMAScript5定义了一个“属性描述符”的对象，这个对象代表那四个特性，描述符对象的特性和它们所描述的属性特性同名。<code>Object.getOwnPropertyDescriptor</code>可以获得某个对象特定属性的属性描述符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(&#123;<span class="attr">x</span>: <span class="number">1</span>&#125;, <span class="string">'x'</span>);   </span><br><span class="line"><span class="comment">// &#123;value: 1, writable: true, enumerable: true, configurable: true&#125;</span></span><br></pre></td></tr></table></figure><p>要想设置属性的特性，或者想让新建属性具有某种特性，则需要调用Object.defineProperty()，这个方法要么修改已有属性，要么新建自由属性，但不能修改继承属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据属性</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'name'</span>, &#123;</span><br><span class="line">value: <span class="string">'wang'</span>, </span><br><span class="line">writable: <span class="literal">true</span>, </span><br><span class="line">enumerable: <span class="literal">true</span>, </span><br><span class="line">configurable: <span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储器属性</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'name'</span>, &#123;</span><br><span class="line">get: functon() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'wang'</span>;</span><br><span class="line">&#125;,</span><br><span class="line">set: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果要同时修改或者创建多个属性，就需要用<code>Object.defineProperties()</code>;</p><h3 id="10、对象的三个属性"><a href="#10、对象的三个属性" class="headerlink" title="10、对象的三个属性"></a><strong>10、对象的三个属性</strong></h3><ul><li><p>原型属性  </p><p>  原型属性是用来继承属性的,ECMAScript5中通过<code>Object.getPrototypeOf()</code>可以查看对象的原型。通过对象直接量或者Object.create()创建的对象包含一个名为constructor的属性，这个属性代指Object()构造函数。因此，constructor.prototype才是对象直接量的真正原型，但对于通过Object.create()创建的对象则往往不是这样的。监测一个对象是否是另一个对象的原型，可以用<code>isPrototypeOf</code>来监测。</p></li></ul><blockquote><p>Mozilla实现的JavaScript对外暴露了一个专门命名为<em>proto</em>的属性，用以直接查询/设置对象的原型。但并不推荐使用<em>proto</em>，因为尽管Safari和Chrome的当前版本都支持它，但IE和Opera还未实现它（可能以后也不会实现）。实现了ECMAScript5的Firefox版本依然支持<em>proto</em>，但对修改不可扩展对象的原型做了限制。</p></blockquote><ul><li><p>类属性</p><p>对象的类属性是一个字符串，用以白哦是对象的类型信息。</p></li><li><p>可扩展性</p><p>对象的可扩展性用以表示是否可以给对象添加新属性。所有内置对象和自定义对象都是显式可扩展的。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对象是JavaScript的基本数据类型，可以通过对象直接量、关键字new和（ECMAScript 5中的）Object.create()函数来创建对象。JavaScript对象可以从一个称为原型的对象继承属性，这种“原型式继承”是JavaScript的核心特征，JavaS
      
    
    </summary>
    
      <category term="前端" scheme="http://arthas.com.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://arthas.com.cn/tags/JavaScript/"/>
    
  </entry>
  
</feed>
